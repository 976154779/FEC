/*----------------------------------------------------------------
File Name  : iRaptorQ.h
Author     : Winglab
Data	   : 2016-12-29
Description:
	Support the middle interface between this Project and
libRaptorQ .
------------------------------------------------------------------*/
#pragma once
#ifndef _WINSOCKAPI_
#define _WINSOCKAPI_
#endif 
#include<Windows.h>
#include<stdint.h>
#include<time.h>
#include"parameter.h" 
#include"ringbuffer.h"
//#include <RaptorQ/iRaptorQ.h>
#define FAKE_RAPTORQ
typedef struct raptorQPacket_t {
	uint32_t tag;
	uint32_t id;
	uint8_t  data[SYMBOL_SIZE];
	clock_t  ts[4];
	uint32_t feedbackID;	//identiy the ID of received feedback
}raptorQPacket_t;

typedef struct raptorQFeedbackInfo_t {
	uint32_t feedbackID;	//identify a feedback of the same packet which has the same tag and id 
	uint32_t tag;
	uint32_t id;
	clock_t ts[4];
	uint32_t count;
}raptorQFeedbackInfo_t;

typedef struct raptorQBlock_t {
	uint32_t tag;
	uint8_t  data[BLOCK_SIZE];
}raptorQBlock_t;

struct RaptorQ_ptr {
	int a;
};
/*
*	necessary preparations before initializing encoder/decoder
*/
void iRaptorQ_pre();


/*
*	Initialize a RaptorQ encoder
*	@data: point to the data that will be encoded
*	@len: specify the original data length
*/ 
struct RaptorQ_ptr *iRaptorQ_Enc(void *data, int len);


/*
*	Initialize a RaptorQ decoder
*/
struct RaptorQ_ptr *iRaptorQ_Dec();


/*
*	generate an encoded symbol
*	@enc: the RaptorQ encoder instance used for encoding
*	@ppac: where the generated symbol would be stored
*	@tag: specify which data block this packet belongs to
*	@sbn: set 0 only
*	@esi: identify the symbol
*/
void iRaptorQ_encode_id(struct RaptorQ_ptr *enc, raptorQPacket_t *ppac,
	uint32_t tag, uint8_t sbn, uint32_t esi);


/*
*	add an encoded symbol to the RaptorQ decoder instance
*	@dec: the RaptorQ decoder instance used for decoding
*	@ppac: where the received symbol is stored
*/
int iRaptorQ_add_symbol_id(struct RaptorQ_ptr *dec, raptorQPacket_t *ppac);


/*
*	recover the original data block
*	@dec: the RaptorQ decoder instance used for decoding
*	@pblk: where the recovered original data block would be stored
*/
int iRaptorQ_decode(struct RaptorQ_ptr *dec, raptorQBlock_t *pblk);
void iRaptorQCreateBlock(raptorQBlock_t *_pBlock, uint8_t *_pBlockData, uint32_t _tag);
void iRaptorQPack(ringBuffer_t * _pRb, raptorQBlock_t *pBlock);
uint32_t iRaptorQ_max_repair(struct RaptorQ_ptr *enc,int xx);